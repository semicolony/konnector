#!/usr/bin/env python3


import os, argparse, pyperclip
import shlex, subprocess
import requests, json
import time
import logging
from modules.fullauto import fullauto

DO_API_TOKEN = False            # '' Add your token
DO_SSH_KEY = False              # '' Add your key
DO_SSH_FINGERPRINT = False      # '' Add your fingerprint
DO_EMAIL = False                # '' Add your email of choice


API_TOKEN = DO_API_TOKEN if DO_API_TOKEN else os.environ.get('DO_API_TOKEN')
SSH_KEY = DO_SSH_KEY if DO_SSH_KEY else os.environ.get('DO_SSH_KEY')
FINGERPRINT = DO_SSH_FINGERPRINT if DO_SSH_FINGERPRINT \
    else os.environ.get('DO_SSH_FINGERPRINT')
EMAIL = DO_EMAIL if DO_EMAIL else os.environ.get('DO_EMAIL')


# dryrun globals
dryrun_droplet_id = '532225757'
dryrun_droplet_ip = '203.0.113.10'
dryrun_token = 'ifn203j2jclmv'


# These were the regions which allowed new droplets at the time the script was
# created. Best to check if they are still available for on-demand droplets!
REGIONS = [
    'nyc1',
    'nyc3',
    'sfo3',
    'ams3',
    'sgp1',
    'lon1',
    'fra1',
    'tor1',
    'blr1'
]


def parse_arguments():
    global name
    global region
    global dryrun
    global verbose
    global run_fullauto
    global debug
    parser = argparse.ArgumentParser()
    parser.add_argument('name',help='Name for the new droplet',\
        metavar='DROPLET')
    parser.add_argument('region',help='Target region for deployment',\
        metavar='REGION',choices=REGIONS)
    parser.add_argument('--dryrun','-n',help='dryrun',action='store_true')
    parser.add_argument('--verbose','-v',help='verbose',action='store_true')
    parser.add_argument('--fullauto',\
        help='runs the complete setup fully automatic',action='store_true')
    parser.add_argument('--debug',action='store_true')
    args = parser.parse_args()
    name = args.name
    region = args.region
    dryrun = args.dryrun
    verbose = args.verbose
    run_fullauto = args.fullauto
    debug = args.debug


def set_logger():
    global logger
    global verblog
    global drylog
    FORMAT = '%(asctime)s %(name)s[%(levelname)s]: %(message)s'
    logging.basicConfig(format=FORMAT,datefmt="%Y-%m-%dT%H:%M:%S%z")
    logger = logging.getLogger('konnector')
    drylog = logging.getLogger('dryrun')
    verblog = logging.getLogger('verbose')
    if verbose:
        logger.setLevel(logging.INFO)
        verblog.setLevel(logging.INFO)
    if debug:
        logger.setLevel(logging.DEBUG)


def run_command(cmd,mode):
    verblog.info(' '.join(cmd))
    verblog.debug(f"stdmode is {mode}")
    if mode == 'quiet':
        try:
            output = subprocess.run(cmd,stdout=subprocess.DEVNULL, \
                text=True,check=True)
        except Exception as err:
            logger.error(f"{cmd} failed -> {err}")
    elif mode == 'fullauto':       # needs to be tested, stdout should not be visible / fullauto mode
        try:
            output = subprocess.run(cmd,stdout=subprocess.PIPE, \
                text=True,check=True)
            pyperclip.paste(output.stdout.strip())
        except Exception as err:
            logger.error(f"{cmd} failed -> {err}")
    else:
        try:
            output = subprocess.run(cmd,stdout=subprocess.PIPE, \
                text=True,check=True)
            return output.stdout.strip()
        except Exception as err:
            logger.error(f"{cmd} failed -> {err}")


def create_droplet():
    verblog.info(f"Creating droplet...")
    verblog.info(f"Name -> {name}")
    verblog.info(f"Region -> {region}")
    url = 'https://api.digitalocean.com/v2/droplets'
    headers = {
        'Authorization': f"Bearer {API_TOKEN}",
        'Content-type': 'application/json'
    }
    data = {
        'name': name,
        'region': region,
        'size': 's-2vcpu-4gb',
        'image': 'kuyio-wireguardianvpna',
        'ssh_keys': [FINGERPRINT]
    }
    if not dryrun:
        r = requests.post(url, headers=headers, json=data)
        response = json.loads(r.content.decode('utf-8'))
        if not r.status_code == 202:
            logger.error(f"Creation of {name} failed\nError -> {response}")
            exit(1)
        droplet_id = response['droplet']['id']
        verblog.info(f"Waiting for the droplet {droplet_id} to be created...")
        time.sleep(15)
    else:
        drylog.info('Would trigger droplet creation via API call')
        droplet_id = dryrun_droplet_id
    if not droplet_id:
        raise Exception('No droplet ID received, check your DO dashboard!')
    return str(droplet_id)


def get_public_ipv4(droplet_id):
    get_public_ipv4 = ['doctl', 'compute', 'droplet', 'get', droplet_id, \
    '--format', 'PublicIPv4', '--no-header']
    verblog.info('Getting pulic IPv4 address via doctl')
    if not dryrun:
        return run_command(get_public_ipv4,'stdout')
    else:
        drylog.info(f"Running -> {' '.join(get_public_ipv4)}")
        return dryrun_droplet_ip


def start_konnect(droplet_ip):
    key = f"-i {SSH_KEY}" if SSH_KEY else ''
    ssh = f"ssh -q -o StrictHostKeyChecking=no {key} root@{droplet_ip}"
    start_container = shlex.split(f'ssh -q {key} -o StrictHostKeyChecking=no \
        root@{droplet_ip} "cd /opt/konnect; docker-compose up -d"')
    get_token = shlex.split(f'{ssh} "cd /opt/konnect; docker-compose logs \
| grep "token" | awk \'{{print $14}}\'"')
    if not dryrun:
        verblog.info(f"Waiting for {name} -> {droplet_ip} to be reachable...")
        time.sleep(120)
        verblog.info('Starting konnect docker container...')
        if verbose:
            run_command(start_container,'stdout')
        else:
            run_command(start_container,'quiet')
        time.sleep(10)
        verblog.info('Getting your authentication token...')
        time.sleep(10)
        konnect_token = run_command(get_token,'stdout')
    else:
        drylog.info(f"Running -> {' '.join(start_container)}")
        drylog.info(f"Running -> {' '.join(get_token)}")
        konnect_token = dryrun_token
    logger.critical(f"Token to validate http://{droplet_ip} -> {konnect_token}")
    pyperclip.copy(konnect_token) if run_fullauto else None


def main():
    parse_arguments()
    set_logger()
    droplet_id = create_droplet()
    droplet_ip = get_public_ipv4(droplet_id)
    url = f"http://{droplet_ip}"
    start_konnect(droplet_ip)
    fullauto(url,name,region,EMAIL) if run_fullauto else None


if __name__ == '__main__':
    main()
