#!/usr/bin/env python3


import os, argparse, pyperclip
import shlex, subprocess
import requests, json
import time
import logging


DO_API_TOKEN = False            # '' Add your token
DO_SSH_KEY = False              # '' Add your key
DO_SSH_FINGERPRINT = False      # '' Add your fingerprint


API_TOKEN = DO_API_TOKEN if DO_API_TOKEN else os.environ.get('DO_API_TOKEN')
SSH_KEY = DO_SSH_KEY if DO_SSH_KEY else os.environ.get('DO_SSH_KEY')
FINGERPRINT = DO_SSH_FINGERPRINT if DO_SSH_FINGERPRINT \
    else os.environ.get('DO_SSH_FINGERPRINT')


# dryrun globals
dryrun_droplet_id = '532225757'
dryrun_droplet_ip = '203.0.113.10'
dryrun_token = 'ifn203j2jclmv'


# These were the regions which allowed new droplets at the time the script was
# created. Best to check if they are still available for on-demand droplets!
REGIONS = [
    'nyc1',
    'nyc3',
    'sfo3',
    'ams3',
    'sgp1',
    'lon1',
    'fra1',
    'tor1',
    'blr1'
]


def parse_arguments():
    global region
    global name
    global dryrun
    parser = argparse.ArgumentParser(description = f"Usage for {sys.argv[0]}")
    parser.add_argument('name', help='Name for the new droplet', \
        metavar='DROPLET')
    parser.add_argument('region', help='Target region for deployment', \
        metavar='REGION', choices=REGIONS)
    parser.add_argument('--dryrun','-n', help='dryrun', action='store_true')
    args = parser.parse_args()
    name = args.name
    region = args.region
    dryrun = args.dryrun


def create_droplet():
    logging.info(f"Creating droplet...")
    logging.info(f"Name -> {name}")
    logging.info(f"Region -> {region}")
    url = 'https://api.digitalocean.com/v2/droplets'
    headers = {
        'Authorization': f"Bearer {API_TOKEN}",
        'Content-type': 'application/json'
    }
    data = {
        'name': name,
        'region': region,
        'size': 's-2vcpu-4gb',
        'image': 'kuyio-wireguardianvpna',
        'ssh_keys': [FINGERPRINT]
    }
    if not dryrun:
        r = requests.post(url, headers=headers, json=data)
        response = json.loads(r.content.decode('utf-8'))
        if not r.status_code == 202:
            logging.error(f"Creation of {name} failed\nError -> {response}")
            exit(1)
        droplet_id = response['droplet']['id']
        logging.info(f"Waiting for the droplet {droplet_id} to be created...")
        time.sleep(15)
        return str(droplet_id)
    else:
        logging.info('DRYRUN: Would trigger droplet creation via API call')


def get_public_ipv4(droplet_id):
    cmd = ['doctl', 'compute', 'droplet', 'get', droplet_id, '--format', \
        'PublicIPv4', '--no-header']
    if not dryrun:
        try:
            output = subprocess.run(cmd, stdout=subprocess.PIPE, text=True, \
                check=True)
        except Exception as err:
            err_exit(1,f"{' '.join(cmd)} failed", f"{err}")
        return output.stdout.strip()
    else:
        return '203.0.113.10'
        logging.info(f"DRYRUN: Running -> {' '.join(get_public_ipv4)}")


def start_konnect(name,droplet_ip):
    key = f"-i {SSH_KEY}" if SSH_KEY else ''
    if not dryrun:
        logging.info(f"Waiting for {name} -> {droplet_ip} to be reachable...")
        time.sleep(120)
        cmd = shlex.split(f'ssh -q {key} -o StrictHostKeyChecking=no \
        root@{droplet_ip} "cd /opt/konnect; echo starting konnect service; \
        docker-compose up -d"')
        try:
            output = subprocess.run(cmd, stdout=subprocess.PIPE, text=True, \
                check=True)
        except Exception as err:
            err_exit(2,f"{' '.join(cmd)} failed", f"{err}")
        logging.info('Starting konnect docker container...')
        else:
            print(output.stdout)
        time.sleep(10)
        logging.info('Getting your authentication token...')
        time.sleep(10)
        cmd = shlex.split(f'''ssh -q {key} -o StrictHostKeyChecking=no \
        root@{droplet_ip} "cd /opt/konnect; docker-compose logs \
        | grep "token" | awk '{{print $14}}'"''')
        try:
            output = subprocess.run(cmd, stdout=subprocess.PIPE, text=True, \
                check=True)
        except Exception as err:
            err_exit(2,f"{' '.join(cmd)} failed", f"{err}")
        print(f"\nToken to validate http://{droplet_ip} -> {output.stdout}\n")
    else:
        logging.info(f"DRYRUN: Running -> {' '.join(start_container)}")
        logging.info(f"DRYRUN: Running -> {' '.join(get_token)}")
        konnect_token = dryrun_token
    logging.critical(f"Token to validate http://{droplet_ip} -> {konnect_token}")

def main():
    parse_arguments()
    droplet_id = (create_droplet(name,region))
    droplet_ip = (get_public_ipv4(droplet_id))
    start_konnect(name,droplet_ip)


if __name__ == '__main__':
    main()
