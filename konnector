#!/usr/bin/env python3


import sys, os, argparse
import shlex, subprocess
import requests, json
import time


DO_API_TOKEN = False            # '' Add your token
DO_SSH_FINGERPRINT = False      # '' Add your fingerprint
DO_SSH_KEY = False              # '' Add your key


API_TOKEN = DO_API_TOKEN if DO_API_TOKEN else os.environ.get('DO_API_TOKEN')
FINGERPRINT = DO_SSH_FINGERPRINT if DO_SSH_FINGERPRINT \
    else os.environ.get('DO_SSH_FINGERPRINT')
SSH_KEY = DO_SSH_KEY if DO_SSH_KEY else os.environ.get('DO_SSH_KEY')


### Globals
URL = 'https://api.digitalocean.com/v2/droplets'
HEADERS = {
    'Authorization': f"Bearer {API_TOKEN}",
    'Content-type': 'application/json'
}

# These were the regions which allowed new droplets at the time the script was
# created. Best to check if they are still available for on-demand droplets!
REGIONS = [
    'nyc1',
    'nyc3',
    'sfo3',
    'ams3',
    'sgp1',
    'lon1',
    'fra1',
    'tor1',
    'blr1'
]


def parse_arguments():
    global region
    global name
    parser = argparse.ArgumentParser(description = f"Usage for {sys.argv[0]}")
    args = parser.parse_args()
    parser.add_argument('name', help='droplet name', metavar='DROPLET', \
        type=ascii)
    parser.add_argument('region', help='target region', metavar='REGION', \
        choices=REGIONS)
    parser.add_argument('--dryrun','-n', help='dryrun', action='store_true')
    args = parser.parse_args()
    name = args.name
    region = args.region
    dryrun = args.dryrun


def err_exit(code,msg,*args):
    print(f"Error in: {__name__}")
    print(f"{msg}")
    if len(args) != 0:
        if args is dict:
            for k,v in args.items():
                print(f"{k}: {v}")
        else:
            args = ' '.join(args)
            print(f"Exception: {args}")
    exit(code)


def create_droplet(name,region):
    print(f"Creating droplet...\nName -> {name}\nRegion -> {region}")
    data = {
        'name': name,
        'region': region,
        'size': 's-2vcpu-4gb',
        'image': 'kuyio-wireguardianvpna',
        'ssh_keys': [f"{FINGERPRINT}"]
    }
    r = requests.post(URL, headers=HEADERS, json=data)
    response = json.loads(r.content.decode('utf-8'))
    if not r.status_code == 202:
        err_exit(1,f"Creation of {name} failed",f"{response}")
    droplet_id = response['droplet']['id']
    print(f"Waiting for the droplet {droplet_id} to be created...")
    time.sleep(15)
    return droplet_id


def get_public_ipv4(droplet_id):
    cmd = ['doctl', 'compute', 'droplet', 'get', droplet_id, '--format', \
        'PublicIPv4', '--no-header']
    try:
        output = subprocess.run(cmd, capture_output=True, text=True)
    except Exception as err:
        err_exit(1,f"{' '.join(cmd)} failed", f"{err}")
    return output.stdout


def start_konnect(name,droplet_ip):
    key = f"-i {DO_SSH_KEY}" if DO_SSH_KEY else key = ''
    print(f"Waiting for {name} -> {droplet_ip} to be reachable...")
    time.sleep(120)
    print('Starting konnect...')
    cmd = shlex.split(f'ssh {key} StrictHostKeyChecking=no \
        root@{droplet_ip} "cd /opt/konnect; echo starting konnect service; \
        docker-compose up -d"')
    try:
        output = subprocess.run(cmd, capture_output=True, text=True)
    except Exception as err:
        err_exit(2,f"{' '.join(cmd)} failed", f"{err}")
    else:
        print(output.stdout)
    time.sleep(10)
    print('Getting your authentication token...')
    time.sleep(10)
    cmd = shlex.split(f'''ssh {key} -o StrictHostKeyChecking=no \
        root@{droplet_ip} "cd /opt/konnect; docker-compose logs \
        | grep "token" | awk '{{print $14}}'"''')
    try:
        output = subprocess.run(cmd, capture_output=True, text=True)
        konnecttoken = output.stdout
    except Exception as err:
        err_exit(2,f"{' '.join(cmd)} failed", f"{err}")
    print(f"\nToken to validate http://{droplet_ip} -> {konnecttoken}\n")


def main():
    droplet_id = str(create_droplet(name,region))
    droplet_ip = (get_public_ipv4(droplet_id)).strip()
    start_konnect(name,droplet_ip)


if __name__ == '__main__':
    main()
